{"name": "test_invest_3_success", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_invest_pytest"}, {"name": "subSuite", "value": "TestInvest"}, {"name": "host", "value": "PC-20170802DMIF"}, {"name": "thread", "value": "1324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_invest_pytest"}], "uuid": "575a473e-6912-47e6-83c2-e8871334d1be", "start": 1552202855634, "fullName": "TestCases.test_invest_pytest.TestInvest#test_invest_3_success", "status": "broken", "attachments": [{"name": "log", "source": "893de115-d9a5-4c4f-88aa-15e117bff43a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "b66a4432-91a9-4c52-a325-b4be9ef72fed-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7cd0712c-d8a9-4747-820f-d1f8d472d233-attachment.txt", "type": "text/plain"}], "statusDetails": {"trace": "self = <TestCases.test_invest_pytest.TestInvest testMethod=test_invest_3_success>\n\n    @pytest.mark.smoke\n    @pytest.mark.login\n    def test_invest_3_success(self):\n        # 步骤\n        # 1、首页 - 选标投资。默认选第一个标。\n        # IndexPage(self.driver).click_firstBid()\n        # 2.0标页面 - 金额输入框中，获取用户的当前余额\n        bp = BidPage(self.driver)\n>       userMoney_beforeInvest = bp.get_userLeftMoney()\n\nTestCases\\test_invest_pytest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\bid_page.py:11: in get_userLeftMoney\n    self.wait_eleVisible(loc.money_input, model_name=\"标页面_获取用户余额\")\nCommon\\basepage.py:23: in wait_eleVisible\n    WebDriverWait(self.driver, timeout, poll_frequency).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"68b254c684e65f1736e576eb9ec73b4c\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x00000000043C4128>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python34\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException", "message": "selenium.common.exceptions.TimeoutException: Message:"}, "stop": 1552202937596, "historyId": "a5453bcf304993afb682559e080486d3"}